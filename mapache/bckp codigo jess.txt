/*

  iterator erase(const_iterator pos) { //falta delete
      if (header.parent == nullptr) return iterator();

      Node* y = const_cast<Node*>(pos.n);
      Color y_original_color = y->color;

      Node* x = nullptr;
      if (!pos.n->hasChild(0))
      {
          x = const_cast<Node*>(pos.n->child[1]);
          Transplant(const_cast<Node*>(pos.n), pos.n->child[1]);
      }
      else if (!pos.n->hasChild(1))
      {
          x = const_cast<Node*>(pos.n->child[0]);
          Transplant(const_cast<Node*>(pos.n), pos.n->child[0]);
      }
      else y = const_cast<Node*>(pos.n)->nextInorder();
      y_original_color = y->color;
      x = y->child[1];
      if (y->parent->value().first == pos.n->value().first)
      {
          x->parent = y;
      } else
      {
          Transplant(y, y->child[1]);
          y->child[1] = pos.n->child[1];
          if (y->hasChild(1)) y->child[1]->parent = y;
          Transplant(const_cast<Node*>(pos.n), y);
          y->child[0] = pos.n->child[0];
          if (y->hasChild(0)) y->child[0]->parent = y;
          y->color = pos.n->color;
          if (y_original_color == Color::Black)
          {
              delfix(const_cast<Node*>(pos.n));
          }
        if (!pos.n->hasChild(0) || !pos.n->hasChild(1))
        {
            y = const_cast<Node*>(pos.n);
      }
      else
        {
            y = const_cast<Node*>(pos.n)->nextInorder();
        }
      if (y->hasChild(0)) x = y->child[0];
      else {
          if (y->hasChild(1)) {
              x = y->child[1];
          } else {
              x = nullptr;
          }
      }
      if (x != nullptr)    x->parent = y->parent;
      if (y->parent->is_header())
          {
              header.parent = x;
          }
      else{
              if (y->isChild(0))
              {
                  y->parent->child[0] = x;
              }
              else y->parent->child[1] = x;
          }
          if (y->key() != pos.n->key())
          {
              Transplant(const_cast<Node*>(pos.n), y);
          }
          if (y->color == Color::Black) delfix(x);

    if (pos.n->child[0] == nullptr || pos.n->child[1] == nullptr)
    {
        y = const_cast<Node*>(pos.n);
    }
      else y = const_cast<Node*>(pos.n->nextInorder());
      if (y->hasChild(0)) x = y->child[0];
      else x = y->child[1];
      x->parent = y->parent;
      if  (y->parent->is_header())
      {
          header.parent = x;
      }
      else if (y->isChild(0))
      {
          y->parent->child[0] = x;
      }
      else y->parent->child[1] = x;
      if (y != const_cast<Node*>(pos))
      {

      }
 }
*/



/*  Node *actual = header.parent;

      //Node *node = root;
      while (actual != nullptr) {
          if (lt(key, actual->key())) {
              actual = actual->child[0];
          } else if (lt(actual->key(), key)) {
              actual = actual->child[1];
          } else {
              break;
          }
      }

      if (actual == nullptr || actual->key() != key) {
          return;
      }
        count--;
      Color original;
      Node *sub, *old;
      old = nullptr;
      if (actual->child[0] == nullptr) {
          Transplant(actual, sub = actual->child[1]);
      } else if (actual->child[1] == nullptr) {
          Transplant(actual, sub = actual->child[0]);
      } else {
          old = (actual->child[1])->getDMost(0);
          original = old->color;
          sub = old->child[1];

          if (old->parent == actual) {
              sub->parent = actual;
          } else {
              Transplant(old, old->child[1]);
              old->child[1] = actual->child[1];
              old->child[1]->parent = old;
          }

          Transplant(actual, old);
          old->child[0] = actual->child[0];
          old->child[0]->parent = old;
          old->color = actual->color;
      }

      delete actual;
      if (original == Color::Black) {
          bool side;
          Node *sibling;
          while (old != header.parent && old->color == Color::Black) {
              if ((side = (old == old->parent->child[0]))) {
                  sibling = old->parent->child[1];
              } else {
                  sibling = old->parent->child[0];
              }

              if (sibling->color == Color::Red) {
                  sibling->color = Color::Black;
                  old->parent->color = Color::Red;
                  side ? leftrotate(old->parent) : rightrotate(old->parent);
                  sibling = side ? old->parent->child[1] : old->parent->child[0];
              }

              if (sibling->child[0]->color == Color::Black && sibling->child[1]->color == Color::Black) {
                  sibling->color = Color::Red;
                  old = old->parent;
              } else {
                  if (Color::Black == (side ? sibling->child[1]->color : sibling->child[0]->color)) {
                      sibling->color = Color::Red;
                      if (side) {
                          sibling->child[0]->color = Color::Black;
                          rightrotate(sibling);
                          sibling = old->parent->child[1];
                      } else {
                          sibling->child[1]->color = Color::Black;
                          leftrotate(sibling);
                          sibling = old->parent->child[0];
                      }
                  }

                  sibling->color = old->parent->color;
                  old->parent->color = Color::Black;
                  if (side) {
                      sibling->child[0]->color = Color::Black;
                      leftrotate(old->parent);
                  } else {
                      sibling->child[1]->color = Color::Black;
                      rightrotate(old->parent);
                  }

                  old = header.parent;
              }
          }
      }*/


 //void Transplant(Node *dest, Node *src)
    //{
//        if (dest->parent == &header)
//        {
//            header.parent = src;
//            src->parent = &header;
//        }
//        else if (dest == dest->parent->child[0])
//        {
//            dest->parent->child[0] = src;
//        }
//        else
//        {
//            dest->parent->child[1] = src;
//        }
//
//        if (src != nullptr)
//        {
//            src->parent = dest->parent;
//           // dest->color = src->color;
//            //hay q asignarle el value!!
//        }
//    }